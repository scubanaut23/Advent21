{"version":3,"sources":["../src/Snowfall.tsx"],"names":["Snowfall","color","defaultConfig","changeFrequency","radius","speed","wind","snowflakeCount","style","mergedStyle","canvasRef","canvasSize","animationFrame","lastUpdate","Date","now","config","snowflakes","updateCanvasRef","element","current","render","framesPassed","canvas","forEach","snowflake","update","ctx","getContext","clearRect","offsetWidth","offsetHeight","draw","loop","msPassed","targetFrameTime","requestAnimationFrame","cancelAnimationFrame","height","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from 'react'\r\nimport { targetFrameTime } from './config'\r\nimport { useComponentSize, useSnowfallStyle, useSnowflakes, useDeepMemo } from './hooks'\r\nimport { SnowflakeProps, defaultConfig } from './Snowflake'\r\n\r\nexport interface SnowfallProps extends Partial<SnowflakeProps> {\r\n  /**\r\n   * The number of snowflakes to be rendered.\r\n   *\r\n   * The default value is 150.\r\n   */\r\n  snowflakeCount?: number\r\n  /**\r\n   * Any style properties that will be passed to the canvas element.\r\n   */\r\n  style?: React.CSSProperties\r\n}\r\n\r\nconst Snowfall = ({\r\n  color = defaultConfig.color,\r\n  changeFrequency = defaultConfig.changeFrequency,\r\n  radius = defaultConfig.radius,\r\n  speed = defaultConfig.speed,\r\n  wind = defaultConfig.wind,\r\n  snowflakeCount = 150,\r\n  style,\r\n}: SnowfallProps = {}) => {\r\n  const mergedStyle = useSnowfallStyle(style)\r\n\r\n  const canvasRef = useRef<HTMLCanvasElement>()\r\n  const canvasSize = useComponentSize(canvasRef)\r\n  const animationFrame = useRef(0)\r\n\r\n  const lastUpdate = useRef(Date.now())\r\n  const config = useDeepMemo<SnowflakeProps>({ color, changeFrequency, radius, speed, wind })\r\n  const snowflakes = useSnowflakes(canvasRef, snowflakeCount, config)\r\n\r\n  const updateCanvasRef = (element: HTMLCanvasElement) => {\r\n    canvasRef.current = element\r\n  }\r\n\r\n  const render = useCallback(\r\n    (framesPassed: number = 1) => {\r\n      const canvas = canvasRef.current\r\n      if (canvas) {\r\n        // Update the positions of the snowflakes\r\n        snowflakes.forEach(snowflake => snowflake.update(canvas, framesPassed))\r\n\r\n        // Render them if the canvas is available\r\n        const ctx = canvas.getContext('2d')\r\n        if (ctx) {\r\n          ctx.clearRect(0, 0, canvas.offsetWidth, canvas.offsetHeight)\r\n\r\n          snowflakes.forEach(snowflake => snowflake.draw(canvas, ctx))\r\n        }\r\n      }\r\n    },\r\n    [snowflakes],\r\n  )\r\n\r\n  const loop = useCallback(() => {\r\n    // Update based on time passed so that a slow frame rate won't slow down the snowflake\r\n    const now = Date.now()\r\n    const msPassed = Date.now() - lastUpdate.current\r\n    lastUpdate.current = now\r\n\r\n    // Frames that would have passed if running at 60 fps\r\n    const framesPassed = msPassed / targetFrameTime\r\n\r\n    render(framesPassed)\r\n\r\n    animationFrame.current = requestAnimationFrame(loop)\r\n  }, [render])\r\n\r\n  useEffect(() => {\r\n    loop()\r\n    return () => cancelAnimationFrame(animationFrame.current)\r\n  }, [loop])\r\n\r\n  return <canvas ref={updateCanvasRef} height={canvasSize.height} width={canvasSize.width} style={mergedStyle} />\r\n}\r\n\r\nexport default Snowfall\r\n"],"file":"Snowfall.js"}