{"version":3,"sources":["../src/hooks.ts"],"names":["createSnowflakes","canvasRef","amount","config","snowflakes","i","push","Snowflake","current","useSnowflakes","setSnowflakes","sizeDifference","length","slice","map","snowflake","useComponentSize","ref","size","setSize","resizeHandler","window","ResizeObserver","resizeObserver","observe","disconnect","addEventListener","removeEventListener","useSnowfallStyle","overrides","styles","snowfallBaseStyle","useDeepCompareEffect","effect","deps","useDeepMemo","value","state","setState"],"mappings":"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","sourcesContent":["import {\r\n  DependencyList,\r\n  EffectCallback,\r\n  useCallback,\r\n  useLayoutEffect,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n  MutableRefObject,\r\n  CSSProperties,\r\n  useMemo,\r\n} from 'react'\r\nimport isEqual from 'react-fast-compare'\r\nimport Snowflake, { SnowflakeConfig } from './Snowflake'\r\nimport { snowfallBaseStyle } from './config'\r\nimport { getSize } from './utils'\r\n\r\n/**\r\n * A utility function to create a collection of snowflakes\r\n * @param canvasRef A ref to the canvas element\r\n * @param amount The number of snowflakes\r\n * @param config The configuration for each snowflake\r\n */\r\nconst createSnowflakes = (\r\n  canvasRef: React.MutableRefObject<HTMLCanvasElement | undefined>,\r\n  amount: number,\r\n  config: SnowflakeConfig,\r\n) => {\r\n  const snowflakes: Snowflake[] = []\r\n\r\n  for (let i = 0; i < amount; i++) {\r\n    snowflakes.push(new Snowflake(canvasRef.current as HTMLCanvasElement, config))\r\n  }\r\n\r\n  return snowflakes\r\n}\r\n\r\n/**\r\n * A utility hook to manage creating and updating a collection of snowflakes\r\n * @param canvasRef A ref to the canvas element\r\n * @param amount The number of snowflakes\r\n * @param config The configuration for each snowflake\r\n */\r\nexport const useSnowflakes = (\r\n  canvasRef: React.MutableRefObject<HTMLCanvasElement | undefined>,\r\n  amount: number,\r\n  config: SnowflakeConfig,\r\n) => {\r\n  const [snowflakes, setSnowflakes] = useState<Snowflake[]>([])\r\n\r\n  // Handle change of amount\r\n  useEffect(() => {\r\n    setSnowflakes(snowflakes => {\r\n      const sizeDifference = amount - snowflakes.length\r\n\r\n      if (sizeDifference > 0) {\r\n        return [...snowflakes, ...createSnowflakes(canvasRef, sizeDifference, config)]\r\n      }\r\n\r\n      if (sizeDifference < 0) {\r\n        return snowflakes.slice(0, amount)\r\n      }\r\n\r\n      return snowflakes\r\n    })\r\n  }, [amount, canvasRef, config])\r\n\r\n  // Handle change of config\r\n  useEffect(() => {\r\n    setSnowflakes(snowflakes =>\r\n      snowflakes.map(snowflake => {\r\n        snowflake.config = config\r\n        return snowflake\r\n      }),\r\n    )\r\n  }, [config])\r\n\r\n  return snowflakes\r\n}\r\n\r\n/**\r\n * Returns the height and width of a HTML element, uses the `ResizeObserver` api if available to detect changes to the\r\n * size. Falls back to listening for resize events on the window.\r\n * @param ref A ref to the HTML element to be measured\r\n */\r\nexport const useComponentSize = (ref: MutableRefObject<HTMLElement | undefined>) => {\r\n  const [size, setSize] = useState(getSize(ref.current))\r\n\r\n  const resizeHandler = useCallback(() => {\r\n    if (ref.current) {\r\n      setSize(getSize(ref.current))\r\n    }\r\n  }, [ref])\r\n\r\n  useLayoutEffect(() => {\r\n    const { ResizeObserver } = window\r\n\r\n    if (!ref.current) return\r\n    resizeHandler()\r\n\r\n    if (typeof ResizeObserver === 'function') {\r\n      const resizeObserver = new ResizeObserver(resizeHandler)\r\n      resizeObserver.observe(ref.current)\r\n\r\n      return () => resizeObserver.disconnect()\r\n    } else {\r\n      window.addEventListener('resize', resizeHandler)\r\n\r\n      return () => window.removeEventListener('resize', resizeHandler)\r\n    }\r\n  }, [ref, resizeHandler])\r\n\r\n  return size\r\n}\r\n\r\n/**\r\n * Utility hook that merges any provided styles with the default styles\r\n * @param overrides The style prop passed into the component\r\n */\r\nexport const useSnowfallStyle = (overrides?: CSSProperties) => {\r\n  const styles = useMemo(\r\n    () => ({\r\n      ...snowfallBaseStyle,\r\n      ...(overrides || {}),\r\n    }),\r\n    [overrides],\r\n  )\r\n\r\n  return styles\r\n}\r\n\r\n/**\r\n * Same as `React.useEffect` but uses a deep comparison on the dependency array. This should only\r\n * be used when working with non-primitive dependencies.\r\n *\r\n * @param effect Effect callback to run\r\n * @param deps Effect dependencies\r\n */\r\nexport function useDeepCompareEffect(effect: EffectCallback, deps: DependencyList) {\r\n  const ref = useRef<DependencyList>(deps)\r\n\r\n  // Only update the current dependencies if they are not deep equal\r\n  if (!isEqual(deps, ref.current)) {\r\n    ref.current = deps\r\n  }\r\n\r\n  useEffect(effect, ref.current)\r\n}\r\n\r\n/**\r\n * Utility hook to stabilize a reference to a value, the returned value will always match the input value\r\n * but (unlike an inline object) will maintain [SameValueZero](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n * equality until a change is made.\r\n *\r\n * @example\r\n *\r\n * const obj = useDeepMemo({ foo: 'bar', bar: 'baz' }) // <- inline object creation\r\n * const prevValue = usePrevious(obj) // <- value from the previous render\r\n * console.log(obj === prevValue) // <- always logs true until value changes\r\n */\r\nexport function useDeepMemo<T>(value: T): T {\r\n  const [state, setState] = useState(value)\r\n\r\n  useDeepCompareEffect(() => setState(value), [value])\r\n\r\n  return state\r\n}\r\n"],"file":"hooks.js"}