{"version":3,"sources":["../src/Snowflake.ts"],"names":["defaultConfig","color","radius","speed","wind","changeFrequency","Snowflake","canvas","config","inputCtx","ctx","getContext","beginPath","arc","params","x","y","Math","PI","fillStyle","fullConfig","closePath","fill","framesPassed","nextWind","nextSpeed","offsetWidth","offsetHeight","framesSinceLastUpdate","updateTargetParams","random","translate"],"mappings":"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","sourcesContent":["import { lerp, random } from './utils'\r\n\r\nexport interface SnowflakeProps {\r\n  /** The color of the snowflake, can be any valid CSS color. */\r\n  color: string\r\n  /**\r\n   * The minimum and maximum radius of the snowflake, will be\r\n   * randomly selected within this range.\r\n   * \r\n   * The default value is `[0.5, 3.0]`.\r\n   */\r\n  radius: [minimumRadius: number, maximumRadius: number]\r\n  /**\r\n   * The minimum and maximum speed of the snowflake.\r\n   * \r\n   * The speed determines how quickly the snowflake moves\r\n   * along the y axis (vertical speed).\r\n   * \r\n   * The values will be randomly selected within this range.\r\n   * \r\n   * The default value is `[1.0, 3.0]`.\r\n   */\r\n  speed: [minimumSpeed: number, maximumSpeed: number]\r\n  /**\r\n   * The minimum and maximum wind of the snowflake.\r\n   * \r\n   * The wind determines how quickly the snowflake moves\r\n   * along the x axis (horizontal speed).\r\n   * \r\n   * The values will be randomly selected within this range.\r\n   * \r\n   * The default value is `[-0.5, 2.0]`.\r\n   */\r\n  wind: [minimumWind: number, maximumWind: number]\r\n  /** \r\n   * The frequency in frames that the wind and speed values\r\n   * will update.\r\n   * \r\n   * The default value is 200.\r\n   */\r\n  changeFrequency: number\r\n}\r\n\r\nexport type SnowflakeConfig = Partial<SnowflakeProps>\r\n\r\nexport const defaultConfig: SnowflakeProps = {\r\n  color: '#dee4fd',\r\n  radius: [0.5, 3.0],\r\n  speed: [1.0, 3.0],\r\n  wind: [-0.5, 2.0],\r\n  changeFrequency: 200,\r\n}\r\n\r\ninterface SnowflakeParams {\r\n  x: number\r\n  y: number\r\n  radius: number\r\n  speed: number\r\n  wind: number\r\n  nextSpeed: number\r\n  nextWind: number\r\n}\r\n\r\n/** An individual snowflake that will update it's location every call to `draw` */\r\nclass Snowflake {\r\n  public config: SnowflakeConfig\r\n  private params: SnowflakeParams\r\n  private framesSinceLastUpdate: number\r\n\r\n  public constructor(canvas: HTMLCanvasElement, config: SnowflakeConfig = {}) {\r\n    // Set custom config\r\n    this.config = config\r\n\r\n    // Setting initial parameters\r\n    const { radius, wind, speed } = this.fullConfig\r\n\r\n    this.params = {\r\n      x: random(0, canvas.offsetWidth),\r\n      y: random(-canvas.offsetHeight, 0),\r\n      radius: random(...radius),\r\n      speed: random(...speed),\r\n      wind: random(...wind),\r\n      nextSpeed: random(...wind),\r\n      nextWind: random(...speed),\r\n    }\r\n\r\n    this.framesSinceLastUpdate = 0\r\n  }\r\n\r\n  private get fullConfig() {\r\n    return {\r\n      ...defaultConfig,\r\n      ...this.config,\r\n    }\r\n  }\r\n\r\n  public draw = (canvas: HTMLCanvasElement, inputCtx?: CanvasRenderingContext2D) => {\r\n    const ctx = inputCtx || canvas.getContext('2d')\r\n    if (ctx) {\r\n      ctx.beginPath()\r\n      ctx.arc(this.params.x, this.params.y, this.params.radius, 0, 2 * Math.PI)\r\n      ctx.fillStyle = this.fullConfig.color\r\n      ctx.closePath()\r\n      ctx.fill()\r\n    }\r\n  }\r\n\r\n  private translate = (canvas: HTMLCanvasElement, framesPassed: number = 1) => {\r\n    const { x, y, wind, speed, nextWind, nextSpeed } = this.params\r\n\r\n    // Update current location, wrapping around if going off the canvas\r\n    this.params.x = (x + wind * framesPassed) % canvas.offsetWidth\r\n    this.params.y = (y + speed * framesPassed) % canvas.offsetHeight\r\n\r\n    // Update the wind and speed towards the desired values\r\n    this.params.speed = lerp(speed, nextSpeed, 0.01)\r\n    this.params.wind = lerp(wind, nextWind, 0.01)\r\n\r\n    if (this.framesSinceLastUpdate++ > this.fullConfig.changeFrequency) {\r\n      this.updateTargetParams()\r\n      this.framesSinceLastUpdate = 0\r\n    }\r\n  }\r\n\r\n  private updateTargetParams = () => {\r\n    this.params.nextSpeed = random(...this.fullConfig.speed)\r\n    this.params.nextWind = random(...this.fullConfig.wind)\r\n  }\r\n\r\n  public update = (canvas: HTMLCanvasElement, framesPassed?: number) => {\r\n    this.translate(canvas, framesPassed)\r\n  }\r\n}\r\n\r\nexport default Snowflake\r\n"],"file":"Snowflake.js"}